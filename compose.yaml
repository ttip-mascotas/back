services:
  api:
    build:
      context: .
      dockerfile: Containerfile
    environment:
      - SPRING_SERVER_PORT=${SPRING_SERVER_PORT}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - MINIO_USERNAME=${MINIO_USERNAME}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PUBLIC_BUCKET=${MINIO_PUBLIC_BUCKET}
    ports:
      - "${SPRING_SERVER_PORT}:${SPRING_SERVER_PORT}"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - all

  db:
    image: postgres:16.2-alpine3.19
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/01_init_db.sh
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - all
      - dev

  elasticsearch:
    image: elasticsearch:8.13.3
    restart: always
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - node.name=elasticsearch
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:${ELASTIC_PORT} >/dev/null || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - all
      - dev

  kibana:
    image: kibana:8.13.3
    restart: always
    environment:
      - ELASTICSEARCH_URL=${ELASTIC_HOST}
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - all
      - dev

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    command: server --console-address ":${MINIO_WEBUI_PORT}" /data
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_USERNAME}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_WEBUI_PORT}:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - all
      - dev

  minio-buckets:
    image: minio/mc:RELEASE.2024-04-18T16-45-29Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio ${MINIO_HOST} ${MINIO_USERNAME} ${MINIO_PASSWORD};
      /usr/bin/mc rm -r --force minio/public/;
      /usr/bin/mc mb minio/public;
      /usr/bin/mc anonymous set download minio/public;
      /usr/bin/mc rm -r --force minio/analyses/;
      /usr/bin/mc mb minio/analyses;
      /usr/bin/mc anonymous set download minio/analyses;
      exit 0;
      "
    profiles:
      - all
      - dev

volumes:
  postgres-data:
  elasticsearch-data:
  minio-data:
